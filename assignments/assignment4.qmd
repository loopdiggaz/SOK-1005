---
title: "assignment4"
format: html
editor: visual
warnings: false 
---

**Task1**

```{r}
rm(list=ls())
```

```{r}
require(dplyr)
require(lubridate)
require(tidyverse)
require(quantmod)
```

```{r}
df <- read.csv("https://raw.githubusercontent.com/uit-sok-1005-v23/uit-sok-1005-v23.github.io/main/storedata.csv")
```

```{r}
df$Order_Date <- as.Date(df$Order_Date)
```

```{r}
df$Order_Year <- format(df$Order_Date, "%Y")
df$Order_Month <- format(df$Order_Date, "%m")
df$Order_Day <- format(df$Order_Date, "%d")
```

1:

```{r}

table1 <- df %>% 
  filter(Order_Year == "2017", Order_Month >= "10", Customer_Segment %in% c("Corporate", "Consumer"), Region %in% c("Region 1", "Region 3")) %>% 
  group_by(Region, Order_Month, Customer_Segment) %>% 
  summarise(total_Sales = sum(Sales)) 
```

2:

```{r}
figure1 <- df %>% 
   filter(Order_Year %in% c("2017", "2018", "2019"), 
         Region %in% c("Region 1", "Region 13")) %>% 
  group_by(Region, Order_Month) %>% 
  summarise(total_Sales = sum(Sales)) %>% 
  ggplot(aes(x = Order_Month, y = total_Sales)) + geom_col() + theme_minimal() + xlab("Month") + ylab("Total Sales") + facet_wrap(~ Region)

figure1
```

3:

```{r}
table2 <- df %>% 
   filter(Order_Year %in% c("2017", "2018", "2019"), 
         Region %in% c("Region 1", "Region 13")) %>% 
  group_by(Region, Order_Month) %>% 
  summarise(total_Sales = sum(Sales)) 

table2 <- pivot_wider(table2,names_from = Region, values_from = total_Sales)

table2$Winner <- ifelse(table2$`Region 13` > table2$`Region 1`,"Region 13",
                ifelse(table2$`Region 13` < table2$`Region 1`, "Region 1", "Tie"))
```

4:

```{r}
table3 <- df %>% 
  filter(Order_Year==2017,!Region%in%c("Region 3","Region 5","Region 8"))%>%
  group_by(Product_Category, Customer_Segment) %>% 
  summarize(average_Profit = mean(Profit))
```

**Task 2**

```{r}
getSymbols("XOM", src = "yahoo")

xom_df <- as.data.frame(XOM)

xom_df <- tibble::rownames_to_column(xom_df, var = "Date")

xom_df <- xom_df %>% 
  mutate(Date = as.Date(Date)) %>% 
  filter(Date >= "2010-01-04" & Date < "2022-12-01")

```

```{r}
xom_df <- xom_df %>% 
  mutate(year_month = format(Date, "%Y-%m")) %>%
  group_by(year_month) %>% 
  mutate(exxon.WeightedMean = weighted.mean(XOM.Close))
```

```{r}
getSymbols("DCOILBRENTEU", src = "FRED")

crudeoil_df <- as.data.frame(DCOILBRENTEU)

crudeoil_df <- tibble::rownames_to_column(crudeoil_df, var = "Date")

crudeoil_df <- crudeoil_df %>% 
  mutate(Date = as.Date(Date)) %>%  
  filter(Date >= "2010-01-04" & Date < "2022-12-01")
```

```{r}
exxon <- xom_df %>% 
  select(year_month,exxon.WeightedMean) %>% 
  mutate(year_month = ym(year_month)) %>% 
  distinct()
```

```{r}
crudeoil_df <- na.omit(crudeoil_df)

crudeoil_df <- crudeoil_df  %>% 
  mutate(year_month = format(Date, "%Y-%m")) %>%
  group_by(year_month) %>% 
  mutate(oil.Mean = mean(DCOILBRENTEU))

oil <- crudeoil_df %>% 
  select(year_month,oil.Mean) %>%
  mutate(year_month = ym(year_month)) %>% 
  distinct()
```

```{r}
ggplot() + 
  geom_line(data = oil , aes(x=year_month,y=oil.Mean, col = "oil")) +
  geom_line(data =exxon,aes(x=year_month,y=exxon.WeightedMean,col="exxon"))+   xlab("Date") + ylab("Price USD") + ggtitle("Oil and Exxon Mean") +        theme_minimal()
```

The red line shows the arithmetic mean of the Exxon stock, and the blue line shows the weighted mean of oil prices. Exxon is the biggest oil company in the world, and in the plot it looks like there is some correlation between the stock price of Exxon and the oil price.

```{r}
oil_exxon <- cbind(oil,exxon)

oil_exxon <- oil_exxon %>% 
  select(-year_month...3) %>% 
  rename(year_month = year_month...1)

oil_exxon %>% 
  ggplot(aes(x=oil.Mean,y=exxon.WeightedMean)) + geom_line() + theme_minimal() + xlab("oil") + ylab("exxon") + ggtitle("Correlation in Exxon Stock and Oil price") + geom_abline(intercept = 0, slope = 1, size = 0.5, col = "red") 
```

```{r}
lm(data=oil_exxon, exxon.WeightedMean ~ oil.Mean)
```

By calling the lm function we are fitting a linear model. The intercept tells us the expected value of the price if we consider the average price of all the data. The average price is 56,4.

The second number is the slope. In this example, the effect oil price has on the Exxon stock, the slope is saying that for each increase in oil price the Exxon stock price goes up by 0,278.
